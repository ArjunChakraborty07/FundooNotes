package com.bridgelabz.fundoo.serviceimpl;

import java.time.LocalDateTime;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoo.dto.NotesDTO;
import com.bridgelabz.fundoo.entity.NotesEntity;
import com.bridgelabz.fundoo.entity.UserEntity;
import com.bridgelabz.fundoo.exception.NotesCustomException;
import com.bridgelabz.fundoo.exception.NotesCustomException.TypeOfException;
import com.bridgelabz.fundoo.repositoryimpl.NotesRepositoryImpl;
import com.bridgelabz.fundoo.repositoryimpl.UserRepositoryImpl;
import com.bridgelabz.fundoo.service.INoteService;
import com.bridgelabz.fundoo.utility.JWTOperations;

@Service
public class NoteServiceImpl implements INoteService{

	@Autowired
	private NotesRepositoryImpl notesRepository;

	@Autowired
	private UserRepositoryImpl userRepository;
	
	@Autowired
	private JWTOperations jwt;	
	
	
	public boolean createNotes(NotesDTO notesDTO,String token) {						
		
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));		
		NotesEntity notesEntity= new NotesEntity();		
		BeanUtils.copyProperties(notesDTO, notesEntity);		
		notesEntity.setCreatedDate(LocalDateTime.now());
		notesEntity.setColor("white");
		notesEntity.setPinned(false);
		notesEntity.setArchived(false);
		notesEntity.setTrashed(false);
		notesEntity.setRemainderDate(null);
		user.getNotes().add(notesEntity);
		userRepository.save(user);
		return true;			
	}

	public boolean edit(NotesDTO notesDTO, String token, int noteId) {
						
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));		
		NotesEntity note=user.getNotes().stream().filter(n->n.getNoteId()==noteId).findFirst().orElseThrow(()->new NotesCustomException("Note not found...", null, TypeOfException.NOTE_NOT_FOUND));
		BeanUtils.copyProperties(notesDTO, note);
		note.setUpdatedDate(LocalDateTime.now());									
		user.getNotes().add(note);
		userRepository.save(user);
		return true;
	}

	public boolean delete(String token) {
			
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));
		user.getNotes().clear();
		notesRepository.deleteAllNotes(jwt.tokenDecoder(token));
		userRepository.save(user);
		return true;
	}
	
	public boolean deleteNote(String token, int noteId)
	{
		int userId=jwt.tokenDecoder(token);
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));
		user.getNotes().stream().filter(n->n.getNoteId()==noteId).findFirst().orElseThrow(()->new NotesCustomException("Note not found...", null, TypeOfException.NOTE_NOT_FOUND));
		return notesRepository.deleteSelectedNote(userId, noteId);
			
	}

	public String archieve(int noteId, String token) {
					
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));		
		NotesEntity notes=user.getNotes().stream().filter(n->n.getNoteId()==noteId).findFirst().orElseThrow(()->new NotesCustomException("Note not found...", null, TypeOfException.NOTE_NOT_FOUND));
		notes.setUpdatedDate(LocalDateTime.now());
		if(notes.isArchived())
		{
			notes.setArchived(false);
			user.getNotes().add(notes);	
			userRepository.save(user);
			return "Note removed from archive";
		}
		else
		{
			notes.setArchived(true);
			user.getNotes().add(notes);
			userRepository.save(user);
			return "Note added to archive";
		}
		
		
	}

	public String pinned(int noteId,String token) {
		
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));		
		NotesEntity notes=user.getNotes().stream().filter(n->n.getNoteId()==noteId).findFirst().orElseThrow(()->new NotesCustomException("Note not found...", null, TypeOfException.NOTE_NOT_FOUND));
		notes.setUpdatedDate(LocalDateTime.now());
		if(notes.isPinned())
		{
			notes.setPinned(false);
			user.getNotes().add(notes);	
			userRepository.save(user);
			return "Note removed from pin";
		}
		else
		{
			notes.setPinned(true);
			user.getNotes().add(notes);
			userRepository.save(user);
			return "Note added to pin";
		}
		
	}

	public String trashed(int noteId,String token) {
		
		UserEntity user=userRepository.getUserById(jwt.tokenDecoder(token)).orElseThrow(()->new NotesCustomException("User Not Found...", null, TypeOfException.USER_NOT_FOUND));		
		NotesEntity notes=user.getNotes().stream().filter(n->n.getNoteId()==noteId).findFirst().orElseThrow(()->new NotesCustomException("Note not found...", null, TypeOfException.NOTE_NOT_FOUND));
		notes.setUpdatedDate(LocalDateTime.now());
		if(notes.isArchived())
		{
			notes.setTrashed(false);
			user.getNotes().add(notes);		
			userRepository.save(user);
			return "Note removed from trash";
		}
		else
		{
			notes.setTrashed(true);
			user.getNotes().add(notes);
			userRepository.save(user);
			return "Note added to trash";
		}
		
	}
	
	
	
}
