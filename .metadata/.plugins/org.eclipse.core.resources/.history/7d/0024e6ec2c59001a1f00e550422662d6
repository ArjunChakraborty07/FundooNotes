package com.bridgelabz.fundoo.serviceimpl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoo.dto.UserDetails;
import com.bridgelabz.fundoo.entity.UserEntity;
import com.bridgelabz.fundoo.repository.UserRepository;

@Service
public class RegistrationServiceImpl {

	@Autowired
	private BCryptPasswordEncoder encryption;

	@Autowired
	private UserRepository userRepository;

	private List<UserDetails> obj = new ArrayList<>(Arrays.asList(new UserDetails()));

	public List<UserDetails> getDetails() {
		UserDetails ob1 = obj.get(0);
		if (ob1.getName() == null) {
			obj.remove(0);
		}
		return obj;
	}

	public String addUser(UserDetails object) {

		UserEntity data = new UserEntity();
		obj.add(object);
		BeanUtils.copyProperties(object, data);
		System.out.println(data.getName());
		data.setPassword(encryption.encode(data.getPassword()));
		System.out.println(data.getPassword());
		userRepository.save(data);
////		Configuration con=new Configuration().configure().addAnnotatedClass(UserEntity.class);
//		SessionFactory sf = new Configuration().configure().buildSessionFactory();
//
////		SessionFactory sf=con.buildSessionFactory();
//		Session session = entityManager.unwrap(Session.class);
//		session.saveOrUpdate(data);
////		Session session=sf.openSession();
//		Transaction tx=session.beginTransaction();
//		session.save(data);
//		tx.commit();//		
//		
//
		return "data processing successful";

	}

	public UserDetails getData(String name) {
//		for(int i=0; i<obj.size();i++)
//		{
//			UserDetails ob1=obj.get(i);
//			System.out.println(ob1.getName());
//			if(ob1.getName().equals(name))
//			{
//				return ob1;
//			}
//		}
//		return null;
		return obj.stream().filter(t -> t.getName().equals(name)).findFirst().get();

	}

	public void updateUser(UserDetails object, String name) {
		for (int i = 1; i < obj.size(); i++) {
			UserDetails ob1 = obj.get(i);

			if (ob1.getName().equals(name)) {
				obj.set(i, object);
				return;
			}
		}
	}

	public void deleteUser(String name) {
//		for(int i=1; i<obj.size();i++)
//		{
//			UserDetails ob1=obj.get(i);
//			
//			if(ob1.getName().equals(name))
//			{
//				obj.remove(i);
//				return;
//			}
//		}				
		obj.removeIf(t -> t.getName().equals(name));
	}

	public void userLogin(UserDetails object) {
		
		UserEntity data=userRepository.loginProcess(object);
		
	}
}
